use strict;
use warnings;
use Data::Dumper;
use Encode;
use JSON;
use feature qw (say);

my $TOOLS = "./tools.pl";
require $TOOLS;

my $json = new JSON;

my $tidy_file = "./tmp_data/sccs_hycycd_tidy.txt";
my $import_file = "./tmp_data/sccs_hycycd_import_data.txt";
my $word_uwid_list = "./tmp_data/sccs_hycycd_word_uwid_list.txt";
my $word_pron_list = "./tmp_data/sccs_hycycd_word_pron_list.txt";

open my $TIDY ,"<", $tidy_file or die $!;
open my $IMPORT ,">", $import_file or die $!;
open my $WU_LIST ,">", $word_uwid_list or die $!;
open my $WP_LIST ,">", $word_pron_list or die $!;

# ---uwid config---
my %uwidConfig = (
                  "corp" => 16,      # 四川辞书
                  "len" => 0,        # 0x00
                  "subDict" => 7,    #汉语成语词典
                  );
our $uwidBase = GetUwidBase(\%uwidConfig);
our $uwidCount = 0;
# ---------

while (<$TIDY>) {

    my $line = $_;
    my %body;
    our $word = "";
    our $pointer = "";    # decide example belong to where
    
    while ($line =~ s/<(.+?)>(.+?)<(\/.+?)>//) {

        my $beginTag = $1;
        my $data = $2;
        my $endTag = $3;

        # ```check tag```
        unless (CheckTag($beginTag,$endTag)) {

            say CheckTag($beginTag,$endTag);
            exit;
        }

        MakeBodyStructure(\%body,$beginTag,$data);
    }
    
    my $lineNum;
    if (eof) { $lineNum = 0; }
    else { $lineNum = $.; }
    
    my ($key,$uwid,$obj) = GetImportData(\%body,$lineNum);
    
    say $WU_LIST $key."\t".$uwid;
    say $IMPORT $key."\t".$uwid."\t".$json->encode($obj);
}

close $TIDY;
close $IMPORT;
close $WU_LIST;
close $WP_LIST;

sub CheckTag {

    my ($beginTag,$endTag) = @_;
    
    return 1 if "/".$beginTag eq $endTag;
    return 0 if "/".$beginTag ne $endTag;
    return -1 if $endTag !~ /\//;
};

sub MakeBodyStructure {

    my ($obj,$tag,$data) = @_;
    
    my %bodyString = ('word',1,'index',1);
    my %bodyArray = ('yezuo',1,'jinyi',1,'fanyi',1);
    our $pointer;
    our $word;
    
    # ```word index```
    if (exists $bodyString{$tag}) {

        $word = $data if $tag eq "word";
        IntoBody($obj,$tag,$data,1);
    }
    
    # ```yezuo jinyi fanyi```
    elsif (exists $bodyArray{$tag}) {

        IntoBody($obj,$tag,$data,2);
    }
    # ```pron```
    elsif ($tag eq "pinyin") {

        GetPronData($obj,$word,$data);
    }
    
    # ```sense```
    elsif ($tag eq "sense") {

        $pointer = IntoSenseDef($obj,$data,1);
    }

    # ```sub_sense```
    elsif ($tag eq "sub_sense") {

        $data =~ s/\d+@//g;
        $pointer = IntoSenseDef($obj,$data,2);
    }

    # ```spec_sense```
    elsif ($tag eq "spec_sense") {

        $pointer = IntoSenseDef($obj,$data,3);
    }

    # ```example```
    elsif ($tag eq "example") {

        IntoSenseExample($obj,$pointer,$data);
    }
};

sub GetImportData {

    my ($body,$lineNum) = @_;

    our $uwidBase;
    our $uwidCount++;
    my %objHash;
    my $key = ${$body}{"word"};
    my $uwid = $uwidBase + $uwidCount;
    
    $objHash{"body"} = $body;
    $objHash{"key"} = $key;
    $objHash{"uwid"} = $uwid;
    $objHash{"prev"} = $uwid - 1 if $lineNum != 1;
    $objHash{"next"} = $uwid + 1 if $lineNum;
    
    return ($key,$uwid,\%objHash);
};

sub IntoBody {

    my ($body,$tag,$data,$flag) = @_;

    if ($flag == 1) {
        
        ${$body}{$tag} = $data;
    }
    elsif ($flag == 2) {

        @{${$body}{$tag}} = ()
          if !exists ${$body}{$tag};
        push @{${$body}{$tag}},$data;
    }
};

sub GetPronData {

    my ($body,$word,$data) = @_;

    my $pronWord = $word;
    Encode::_utf8_on($pronWord);
    my $audioFileName = $data;
    $audioFileName =~ s/\s//g;
    my %pronHash;
    my @pronArray;
    
    if (exists ${$body}{"pron"}) {

        $pronHash{"pinyin"} = $data;
        push @{${$body}{"pron"}},\%pronHash;
    }
    else {
        
        if ($pronWord =~ /[\x{e290}-\x{e920}]/) {

            $pronHash{"pinyin"} = $data;
        }
        else {
            
            $pronHash{"pinyin"} = $data;
            $pronHash{"lang"} = "z";
            $pronHash{"name"} = $audioFileName.".mp3";

            say $WP_LIST $word."\t".$audioFileName;
        }
                
        push @pronArray,\%pronHash;
        ${$body}{"pron"} = \@pronArray;
    }
};

sub IntoSenseDef {

    my ($obj,$data,$flag) = @_;

    # ```sense```
    if ($flag == 1) {

        ${${$obj}{"sense"}}{"def"} = $data;
        
        return "sense";
    }
    
    # ```sub_sense```
    elsif ($flag == 2) {

        if (!exists ${${$obj}{"sense"}}{"sub_sense"}) { 
            
            @{${${$obj}{"sense"}}{"sub_sense"}} = ();
        }

        my %tmpHash;
        $tmpHash{"sub_def"} = $data;
        push @{${${$obj}{"sense"}}{"sub_sense"}},\%tmpHash;
        
        return "sub_sense";
    }

    # ```spec_sense```
    elsif ($flag == 3) {

        my %tmpHash;
        $tmpHash{"spec_def"} = $data;
        ${${${$obj}{"sense"}}{"sub_sense"}[-1]}{"spec_sense"} = \%tmpHash;

        return "spec_sense";
    }
};

sub IntoSenseExample {

    my ($obj,$pointer,$data) = @_;

    if ($pointer eq "sense") {

        push @{${${$obj}{"sense"}}{"example"}},$data;
    }
    elsif ($pointer eq "sub_sense") {

        push @{${${${$obj}{"sense"}}{"sub_sense"}[-1]}{"sub_example"}},$data;

    }
    elsif ($pointer eq "spec_sense") {

        push @{${${${${$obj}{"sense"}}{"sub_sense"}[-1]}{"spec_sense"}}{"spec_example"}},$data;
    }
};
