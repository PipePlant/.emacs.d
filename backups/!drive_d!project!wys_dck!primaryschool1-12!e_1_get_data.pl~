use warnings;
use strict;
use JSON;
use Data::Dumper;
use Encode;
use File::Find;
use List::Util qw(shuffle);
use feature qw (say switch);

my $json = new JSON;
$| = 1;

my $dtypeID = 8201;
my $flag = 1; # book和module 从1开始取

# ```get detials file list```
my @dataFile = sort SortByBook  glob "./tmpdocument/1l*_details_full.txt";

# `````
my $exam_file = "./wys_dckxxfo_exam.txt";
open my $EXAM ,">", $exam_file or die $!;

foreach my $file (@dataFile) {

    $file =~ /1l(\d+)/;
    my $book = $1;
    my %detailsData;
    
    open my $DATA ,"<", $file or die $!;
    while (<$DATA>) {

        my $line = $_;
        $line =~ /\t(\d+)\t.*"index":(\d+).*/g;
        
        my $uwid = $1;
        my $index = $2;

        push @{$detailsData{$index}},$uwid;
    }

    foreach my $module (sort {$a <=> $b} keys %detailsData) {

        # 一个module的全部套题
        my $examData = GetExamData($book,$module,\%detailsData);       
        # my $examID = ($dtypeID << 16) | ($book << 12) | ($module << 7);
        my @typeNum = (0,0,0,0,0);
        # say Dumper\$examData;
        # exit;
        foreach my $exam (@{$examData}) {

            my $type;
            my $outPutData;
            
            ($type,$outPutData) = TypeAndFinalData($exam);

            $typeNum[$type-1]++;

            my $examID = 0;
            if ($flag) {
                
                $examID = ($dtypeID << 16) | ($book << 12) | ($module << 8) | ($typeNum[$type-1] - 1 << 3) | $type;
            }
            else {
                
                $examID = ($dtypeID << 16) | ($book-1 << 12) | ($module-1 << 8) | ($typeNum[$type-1] - 1 << 3) | $type;
            }

            my %outPutItem;
            $outPutItem{"uwids"} = $outPutData;
            say $EXAM " \t".$examID."\t".$json->encode(\%outPutItem);
        }
    }
    
    close $DATA;
}
close $EXAM;

sub SortByBook {

    ($a =~ /l(\d+)_/)[0] <=> ($b =~ /l(\d+)_/)[0];
};

sub GetExamData {

    my ($book,$module,$details) = @_;
    my @examData = ();
    my @moduleKey = (1 .. $module);

    # ``````基础题库``````
    my @jichuKey = ($module);
    
    # ~~~只含有基础题库~~~
    if ($module == 1) {
        
        foreach my $times (1 .. 13) {

            push @examData,@{CreatExam(\@jichuKey,$details)};
        }
        
        say "[end]Book $book Module $module";

        return \@examData
    }
    elsif ($module == 2 or $module == 3) {
        
        foreach my $times (1 .. 3) {

            push @examData,@{CreatExam(\@jichuKey,$details)};
        }
        
        my @beixuanKey = ($moduleKey[-1],$moduleKey[-2]);
        foreach my $times (1 .. 3) {

            push @examData,@{CreatExam(\@beixuanKey,$details)};
        }

        foreach my $times (1 .. 7) {

            push @examData,@{CreatExam(\@moduleKey,$details)};
        }

        say "[end]Book $book Module $module";
        return \@examData
    }
    else {

        push @examData,@{CreatExam(\@jichuKey,$details)};
        
        my @beixuanKey = ($moduleKey[-1],$moduleKey[-2]);
        foreach my $times (1 .. 2) {

            push @examData,@{CreatExam(\@beixuanKey,$details)};
        }

        foreach my $times (1 .. 10) {

            push @examData,@{CreatExam(\@moduleKey,$details)};
        }

        say "[end]Book $book Module $module";
        return \@examData
    }
};

sub CreatExam {

    my ($moduleKey,$details) = @_;

    my @source = ();
    map {push @source,@{${$details}{$_}};} @{$moduleKey};
    my @target = ();
    
    # 单词不够8个，只取全能题
    if ($#source < 8) {

        # foreach my $time (1 .. 5) {

            my @randList = shuffle @source;
            push @target,MakeExamAllType(\@randList,"less");
        # }
    }
    else {

        my @randList = ();

        # ```音、形、意、表达```
        foreach my $type (1,2,4,6) {

            @randList = (shuffle @source)[0 .. 7];
            push @target,MakeExamFourType(\@randList,$type);
        }

        # ```全能```
        @randList = (shuffle @source)[0 .. 7];
        push @target,MakeExamAllType(\@randList,"normal");
    }

    return \@target;
};

sub MakeExamFourType {

    # ```音、形、意、表达类型试卷```
    my ($data,$type) = @_;
    my @exam = ();

    @exam = map {my %ques; $ques{$_} = $type; \%ques;} @{$data};

    return \@exam;
};

sub MakeExamAllType {

    # ```全能试卷```
    my ($data,$examType) = @_;
    my @exam = ();
    my @quesType = (1,2,4,6);
    
    if ($examType eq "less") {
        
        my @lessQuesType = (@quesType,@quesType);
        my %checkHash = ();

        foreach my $type (@lessQuesType) {

            my $item = shuffle @{$data};
            if (exists $checkHash{$type}) {
                redo if $checkHash{$type} eq $item;
            }
            my %ques;
            $ques{$item} = $type;
            push @exam,\%ques;
            $checkHash{$type} = $item;
        }
    }
    else {

        foreach my $num (0 .. 7) {
            
            my %ques;
            $ques{${$data}[$num]} = $quesType[$num % 4];
            push @exam,\%ques;
        }
    }

    return \@exam;
};

sub TypeAndFinalData {

    my ($originData) = @_;

    my @targetData = ();
    my $type = 0;
    my %typeHash;

    # ```make data
    foreach my $item (@{$originData}) {
        
        my ($key,$value) = each %{$item};
        push @targetData,int $key;
        # push @targetData,$item;
        $typeHash{$value}++;
    }
    
    # ```chose type
    my @tmpTypes = keys %typeHash;    
    if (@tmpTypes == 1) {

        $type = 0 if $tmpTypes[0] == 1;
        $type = 1 if $tmpTypes[0] == 2;
        $type = 2 if $tmpTypes[0] == 4;
        $type = 3 if $tmpTypes[0] == 6;
    }
    else {

        $type = 4;
    }

    return ($type,\@targetData);
};
