use strict;
use warnings;
use Data::Dumper;
use Encode;
use JSON;
use feature qw(say);

my $json = new JSON;

my %classifiedList = ();
my %typeList = ();
my %wordCheckList = ();
WordListData(\%wordCheckList);
GetDataList(\%classifiedList,\%wordCheckList,\%typeList);
OutputData(\%classifiedList,\%typeList);

sub WordListData {
    # get word hash list
    my $wordCheckList = shift;

    my @wordList_files = glob "./v2_data/word_list/*";
    foreach my $wordList_file (@wordList_files) {
        open my $WORDLIST ,"<", $wordList_file or die $!;
        
        $wordList_file =~ /1l(\d+)/;
        my $bookNum = $1;
        while (<$WORDLIST>) {
            chomp;
            $_ =~ /^(.+?)\t/;
            ${$wordCheckList}{$bookNum}{$_} = 1;
        }
        
        close $WORDLIST;
    }
    
    return 1;
};

sub GetDataList {
    # get classification word hash list
    my ($classifiedList,$wordCheckList,$typeList) = @_;
    
    my $classification_file = "../classification/wys_dckxxfo_word_type.txt";
    open my $CLASS ,"<", $classification_file or die $!;
    
    my %gradeBookNum = ("一",1,"二",2,"三",3,"四",4,"五",5,"六",6);
    my $type = "";
    my $typeNum = 0;
    while (<$CLASS>) {
        chomp;
        my $line = $_;
        
        if ($line =~ /=> (.*)/) {
            $type = $1;
            my $typeKey = "fl_fla".sprintf("%02d",++$typeNum);
            ${$typeList}{$type} = $typeKey;
            ${$typeList}{$typeKey} = $type;
        } elsif ($line =~ /(.+?)年级(.+?)册：(.*)/) {
            my $bookNum = $gradeBookNum{$1} * 2;
            $bookNum-- if $2 eq "上";
            my $wordData = $3;
            
            foreach my $word (split /, /,$wordData) {
                if (exists ${$wordCheckList}{$bookNum}{$word}) {
                    ${$classifiedList}{$bookNum}{$word} = $type;
                } else {
                    # print check error
                    # say $bookNum."\t".$word;
                }
            }
        }
    }
    close $CLASS;
    
    return 1;
};

sub OutputData {
    my ($classifiedList,$typeList) = @_;
    
    system("perl 5_mergence.pl");
    my $details_file = "./tmpdocument/wys_dckxxfo_details_full.txt";
    my $struct_file = "./wys_dckxxfo.classification.txt";
    
    open my $DEATILS ,">", $details_file or die $!;
    my %structData = ();
    foreach my $bookNum (1 .. 12) {
        my $final_file = "./tmpdocument/1l".$bookNum."_details_full.txt";
        open my $FINAL ,"<", $final_file or die $!;
        while (<$FINAL>) {
            chomp;
            my $line = $_;
            $line =~ /^(.+?)\t(.*)\t/;
            my $key = $1;
            my $uwid = $2;
            if (exists ${$classifiedList}{$bookNum}{$key}) {
                my $type = ${$classifiedList}{$bookNum}{$key};
                my $typeKey = ${$typeList}{$type};
                # insert to final data
                $line =~ s/("index")/"wordtype":{"word":"$type","key":"$typeKey"},$1/;
                
                push @{$structData{$typeKey}},$uwid;
            }
            say $DEATILS $line;
        }
        close $FINAL;
    }
    close $DEATILS;
    
    # output to struct file
    open my $STRUCT ,">", $struct_file or die $!;
    foreach my $key (sort {$a cmp $b} keys %structData) {
        my %tmp = ("word" => ${$typeList}{$key},
                   "uwids" => $structData{$key});
        say $STRUCT $key."\t".$json->encode(\%tmp);
    }
    close $STRUCT;
    
    return 1;
};
