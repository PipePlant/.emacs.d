use warnings;
use strict;
use JSON;
use Data::Dumper;
use Encode;
use File::Find;
use Cwd;
use feature qw(say);

1;

sub get_file_list {

    my $dir = $File::Find::name;
    unless (-d $dir) {
        print FL "$dir\n"
            if $dir =~ /\.xml$/;
    }
}

#处理小学1-12数据
sub get_data_p12 {

    my ($file,$fileName,$proWord) = @_;

    open IN ,"< $file", or die $!;

    my %body;
    my $def = "";
    my $buff = "";
    while (<IN>) {
        chomp;
        my $line = $_;
        # ===========_word_============
        if ($line =~ /Entry: ?(.*)<span class='ipa'>/
            or $line =~ /Entry: ?(.*)<span class="ipa"\/>/
            or $line =~ /Entry: ?(.*)/)
        {
            my $tmpValue = $1;
            $tmpValue =~ s/\s+$//g;
            $tmpValue =~ s/##\d+;//g;
            $tmpValue =~ s/&#\d+;//g;
            $tmpValue =~ s/·?//g;
            $tmpValue =~ s/ {2,}/ /g;
            $body{"word"} = $tmpValue;
        }
        # ===========_pron_============
        if ($line =~ /<span class=("audio"|'audio') name=.*\/(.*\.mp3).*>/) {
            # my $tmpValue = $2;
            ${$body{"pron"}}{"v"} = 4;
            ${$body{"pron"}}{"lang"} = "b";
            # ${$body{"pron"}}{"aw"} = $tmpValue;
            $fileName =~ s/(.*).xml/$1/;
            $fileName =~ s/-M\d+//g;
            $fileName =~ s/ |\n//g;
            ${$body{"pron"}}{"aw"} = lc ($fileName.".mp3");
        }

        # ===========_def_============
        if ($line =~ /<td>(.*)<\/td>/) {
            my $tmpValue = $1;
            my %tmpHash;
            $tmpValue =~ s/<.+?>//g;
            $tmpValue =~ s/ {2,}/ /g;
            # $body{"def"} = $tmpValue;
            $tmpValue =~ s/…/···/g;
            $tmpHash{"def"} = $tmpValue;
            push(@{$body{"sense"}},\%tmpHash);
        }
        # ===========_example_============
        if ($line =~ /<legend>Example\(s\)(.*)<\/div>/
            or $line =~ /<li>(.*)<\/li>/) 
        {   
            my $tmpValue = $1;
            last
                if (($tmpValue ~~ /Pronunciation/) or ($tmpValue ~~ /Entry/));
            if ($tmpValue =~ /<li>/) {
                my @tmpArray;
                @tmpArray = split("<li>",$tmpValue);
                foreach my $var (@tmpArray) {
                    $var =~ s/<.*?>//g;
                    my $tmpVar = $var;
                    if ($var ne "") {

                        $tmpVar .= "." if $tmpVar =~ /[A-Za-z0-9]$/ and $tmpVar !~ /Ray$/;
                        $tmpVar =~ s/\-That's OK\./<br>\-That's OK\./;
                        $tmpVar =~ s/\-That's OK\./<br>\-That's OK\./;
                        $tmpVar = example_getColor($tmpVar,$body{"word"},$proWord);
                        $tmpVar =~ s/ {2,}/ /g;
                        $tmpVar =~ s/B:/<br>B:/g;
                        $tmpVar =~ s/\\n/<br>/g;
                        $tmpVar =~ s/(<br>){2,}/<br>/g;
                        $tmpVar =~ s/ <br>/<br>/g;
                        push (@{$body{"example"}},$tmpVar);
                    }
                }
            }else{

                $tmpValue .= "." if $tmpValue =~ /[A-Za-z0-9]$/ and $tmpValue !~ /Ray$/;
                $tmpValue = example_getColor($tmpValue,$body{"word"},$proWord);
                $tmpValue =~ s/ {2,}/ /g;
                $tmpValue =~ s/B:/<br>B:/g;
                $tmpValue =~ s/\\n/<br>/g;
                $tmpValue =~ s/(<br>){2,}/<br>/g;
                $tmpValue =~ s/ <br>/<br>/g;
                push (@{$body{"example"}},$tmpValue);
            }
        }
        # ===========_img_============
        if ($line =~ /<img src=.*\/(.*\.jpg?)".*\/>/ or 
            $line =~ /<img src=.*\/.*\/(.+?\.jpg).*\/>/)
        {

            my $tmpValue = $1;
            $tmpValue =~ s/ //g;
            $tmpValue =~ s/&#39;/'/g;
            $body{"img"} = lc $tmpValue;
        }

        $buff .= $_;
    }
    close IN;
    unless (exists($body{"sense"})) {
        if ($buff =~ /<td>(.*)<\/td>/) {
            my $tmpValue = $1;
            # if ($tmpValue =~ /(.*)<\/br>.*<b>(.*)<\/b>(.*)<\/definition>/) {
            if ($tmpValue =~ /(.*)<br\/>.*<b>(.*)<\/b>(.*)<\/definition>/) {
                # print "$1\n";
                my $tmpVar = $1;
                my $tmpVar2 = $2;
                my $tmpVar3 = $3;
                my %tmpHash;
                my %tmptmpHash;
                $tmpVar =~ s/<.*?>//g;
                $tmpVar =~ s/ {2,}/ /g;
                $tmpVar =~ s/^\s+//g;
                $tmpVar =~ s/\s+$//g;

                $tmpVar2 =~ s/<.*?>//g;
                $tmpVar2 =~ s/^\s+//g;
                $tmpVar2 =~ s/\s+$//g;
                $tmpVar2 =~ s/ {2,}/ /g;

                $tmpVar3 =~ s/<.*?>//g;
                $tmpVar3 =~ s/^\s+//g;
                $tmpVar3 =~ s/\s+$//g;
                $tmpVar3 =~ s/ {2,}/ /g;

                $tmpHash{"word"} = $tmpVar2;
                $tmpVar3 =~ s/…/···/g;
                $tmpHash{"def"} = $tmpVar3;
                push(@{$body{"phrase"}},\%tmpHash);
                $tmpVar =~ s/…/···/g;
                $tmptmpHash{"def"} = $tmpVar;
                push (@{$body{"sense"}},\%tmptmpHash);
            }elsif ($tmpValue =~ /(.*)<br\/>.*<strong>(.*) (.*?)<\/strong><br\/>/) {
                my $tmp = $1;
                my $tmp2 = $2;
                my $tmp3 = $3;
                my %tmpHash;
                my %tmptmpHash;

                $tmp =~ s/^\s+//g;

                $tmpHash{"word"} = $tmp2;
                $tmp3 =~ s/…/···/g;
                $tmpHash{"def"} = $tmp3;
                push(@{$body{"phrase"}},\%tmpHash);
                $tmp =~ s/…/···/g;
                $tmptmpHash{"def"} = $tmp;
                push (@{$body{"sense"}},\%tmptmpHash);
            }else{
                my %tmptmpHash;
                $tmpValue =~ s/ //g;
                $tmpValue =~ s/<.*?>//g;
                $tmpValue =~ s/…/···/g;
                $tmptmpHash{"def"} = $tmpValue;
                push (@{$body{"sense"}},\%tmptmpHash);
            }
        }
    }
    return %body;
}

sub example_getColor {

    my ($example,$word,$proWord) = @_;
    my $tarExample;

    $word =~ s/\.$/#/g;
    $word =~ s/…|\.|\?|\!//g;
    $word =~ s/#$/\./g;

    my @wordData = ();
    $example =~ s/(.)$//g;
    my $end = $1;
    if ($word eq "I" or
		$word eq "go to bed") {

        $tarExample = $example;
        $tarExample =~ s/($word)/<color>$1<\/color>/g;
    }
	elsif ($word eq "will") {

        $tarExample = $example;
        $tarExample =~ s/($word)/<color>$1<\/color>/g;
        $tarExample =~ s/ (.+?'ll)/<color>$1<\/color>/g;
    }
	elsif ($word eq "goodbye (bye-bye)") {

        $tarExample = $example;
        $tarExample =~ s/(goodbye)/<color>$1<\/color>/ig;
        $tarExample =~ s/(bye-bye)/<color>$1<\/color>/ig;
    }
	elsif ($word eq "how long") {

        $tarExample = $example;
        $tarExample =~ s/($word)/<color>$1<\/color>/ig;
        $tarExample =~ s/(shining)/<color>$1<\/color>/ig;
    }
    else {

        $example =~ s/\-/ \- /g if $word !~ /\-/;
        my @exmpData = split / /,$example;

        if ($word =~ /=/) {

            @wordData = split /=| /,$word;
            @wordData = map {$_ =~ s/^ | $//;$_} @wordData;
        }elsif ($word =~ /\(/) {

            $word =~ /(.*)\((.*)\)(.*)/;
            my $tmpWord1 = $1.$3;
            my $tmpWord2 = $1.$2.$3;

            my @wordData1 = split / /,$tmpWord1;
            my @wordData2 = split / /,$tmpWord2;

            @wordData = (@wordData1,@wordData2);
        }else {

            @wordData = split / /,$word;
        }
        
        my @finalWordData;
        foreach my $var (@wordData) {

            push @finalWordData,$var;
            push @finalWordData,$var."'s";
            push @finalWordData,$var."'m";
            $var =~ s/e$//g;
            push @finalWordData,$var."s";
            push @finalWordData,$var."es";
            push @finalWordData,$var."ed";
            push @finalWordData,$var."ing";
        }

        foreach my $varExample (@exmpData) {

            my $flag = 1;
            my $tmpVarExample = $varExample;
            $tmpVarExample =~ s/"|,|\.|\?|!//g;
            foreach my $varWord (@finalWordData) {
                $varWord =~ s/[^A-Za-z0-9]$//g;
                if ($flag) {
                    my $lcVarExample = lc $varExample;
                    if ($varWord =~ /^$tmpVarExample$/i or 
                        (exists ${$proWord}{$lcVarExample} and ($varWord =~ /^${$proWord}{$lcVarExample}$/i))
                       ) {

                        $varExample =~ s/($tmpVarExample)/<color>$1<\/color>/g;
                        $tarExample .= "$varExample ";
                        $flag = 0;
                    }
                }
            }

            $tarExample .= "$varExample " if $flag;
        }
        if ($word !~ /'/) {

            $tarExample =~ s/'(\w+)<\/color>/<\/color>'$1/g;
        }
        $tarExample =~ s/<\/color> <color>/ /g;
        $tarExample =~ s/<\/color> \- <color>/\-/g;
        
        my @checkData = ();
        if ($word =~ /(.*) = (.*)/) {

            push @checkData,$1;
            push @checkData,$2;
        }
        else {

            @checkData = ($word);
        }
        foreach $word (@checkData) {

            if ($tarExample =~ s/<color>($word)<\/color>/@#$1#@/ig or 
                $tarExample =~ s/<color>(.* )?($word)<\/color>/$1@#$2#@/ig or
                $tarExample =~ s/<color>($word)( .*)?<\/color>/$1@#$2#@/ig){

                $tarExample =~ s/(<color>)|(<\/color>)//g;
                $tarExample =~ s/@#/<color>/g;
                $tarExample =~ s/#@/<\/color>/g;
            }
        }
    }
    $tarExample =~ s/ \- /\-/g;
    $tarExample =~ s/ $//g;
    $tarExample =~ s/ <color>  <\/color> //g;
    $tarExample =~ s/ {2,}/ /g;
    $tarExample .= $end;
    
    #---sepcial---
    $tarExample =~ s/Perhaps</Perhaps </;

    return $tarExample;
}

#处理题目
sub get_questions {

    my ($file,$out,$quesDBRef) = @_;

    my $jsonCoder = new JSON;

    $file =~ /1l(\d+)/;
    my $flag = $1;

    my @tmpQuestions = get_QA($file);
    open IN ,"< $file", or die $!;
    open OUT ,"> $out", or die $!;
    my $num = 1;
    while (<IN>) {
        my $item = $jsonCoder->decode($_);
        my %item = %{$item};

        my @tmpQue = correct_QA(\@tmpQuestions,$item,$quesDBRef);
        my @questions;

        my %checkHash;
        $checkHash{$item{"word"}} = 1;
        $checkHash{${$item{"sense"}[0]}{"def"}} = 1;
        map {$checkHash{$_} = 1;} split /\w/,${$item{"sense"}[0]}{"def"};
        foreach my $var (@tmpQue) {
            my $quesFlag = 1;
            if (!exists $checkHash{${$var}{"word"}} and
                !exists $checkHash{${$var}{"def"}}){

                my @tmpDefAry = grep {$_ ne ""} split /\w/,${$var}{"def"};
                foreach my $tmpDef (@tmpDefAry) {
                    if (exists $checkHash{$tmpDef}) {
                        $quesFlag = 0;
                        last;
                    }
                }
                if ($quesFlag) {
                    $checkHash{${$var}{"word"}} = 1;
                    $checkHash{${$var}{"def"}} = 1;
                    map {$checkHash{$_} = 1;} @tmpDefAry;
                    push @questions,$var;
                }
            }
        }
        my @ques;
        ##########_Q1_##########
        my %quesOne;
        $quesOne{"type"} = 1;
        $quesOne{"answer"} = $item{"word"};

        my %option1; 
        my %option2;
        my %option3;

        $option1{"word"} = $item{"word"};
        $option1{"def"} = ${$item{"sense"}[0]}{"def"};
        $option1{"img"} = $item{"img"}
            if exists ($item{"img"});

        my @tmpOptions;
        push @tmpOptions,\%option1;
        my $desArray1 = desired(\@questions,2);
        push @tmpOptions,@{$desArray1};

        @tmpOptions = rand_array(@tmpOptions);
        $quesOne{"option"} = \@tmpOptions;
        $quesOne{"pron"} = $item{"pron"};
        
        push @ques,\%quesOne;
        ##########_Q2_##########
        # my $targetWord = $item{"word"};

        # my @letD = ("A" .. "Z");
        # my @letX = ("a" .. "z");

        # my $DaxieNum = 0;
        # $DaxieNum = ($targetWord =~ s/(A-Z)/$1/g);
        
        # my @t = split(//,$targetWord);
        # my @spec = ();
        # my @specNum = ();
        # my @tmpT = ();
        # my $ini = 0;
        # foreach my $tmp (@t) {
        
        #     if ($tmp =~ /[^A-Za-z0-9]/) {

        #         push @spec,$tmp;
        #         push @specNum,$ini;
        #     }else {

        #         push @tmpT,$tmp;
        #     }
        #     $ini++;
        # }

        # while (8-@tmpT>0) {

        #     if ($DaxieNum) {

        #         my $num = int rand @letD;
        #         redo if $letD[$num] ~~ @tmpT;
        #         push @tmpT,$letD[$num];
        #         my @foundlist = splice @letD,$num,1;
        #         $DaxieNum--;
        #     }else {
                
        #         my $num = int rand @letX;
        #         redo if $letX[$num] ~~ @tmpT;
        #         push @tmpT,$letX[$num];
        #         my @foundlist = splice @letX,$num,1;
        #     }
        # }
        # my @tmpArray = sort {lc $a cmp lc $b} @tmpT;

        # my $offSet = 0;
        # my @tarArray = ();
        # if (@specNum) {

        #     my $varNum = shift @specNum;
        #     my $varSpec = shift @spec;
        #     # my $num = 0;
        #     foreach my $offNum ($offSet .. (@tmpArray+@specNum)) {

        #        if ($offNum == $varNum) {

        #             push @tarArray,$varSpec;
        #             if (@specNum) {

        #                 $varNum = shift @specNum;

        #             }
        #             $varSpec = shift @spec if @spec;

        #        }else {

        #             my $tmpWord = shift @tmpArray if @tmpArray;
        #             push @tarArray,$tmpWord;
        #        }
        #     }
        # }else {
            
        #     @tarArray = @tmpArray;
        # }
       
        # @tarArray = map {my %tmp; $tmp{"word"} = $_; \%tmp;} @tarArray;

        # ${${$item{"questions"}}{"2"}}{"answer"} = $item{"word"};
        # @{${$item{"questions"}}{"2"}}{"options"} = \@tmpArray;
        my %quesTwo;
        $quesTwo{"type"} = 2; 
        ${$quesTwo{"answer"}}{"word"} = $item{"word"};
        ${$quesTwo{"answer"}}{"def"} = ${${$item{"sense"}}[0]}{"def"};
        # $quesTwo{"option"} = \@tarArray;
        $quesTwo{"pron"} = $item{"pron"};

        push @ques,\%quesTwo;

        ##########_Q3_########## 暂时不用
        # else {

        #     # ${${$item{"questions"}}{"3"}}{"answer"} = $item{"word"};
        #     # ${${$item{"questions"}}{"3"}}{"pron"} = ${$item{"pron"}}{"aw"};
        #     my %quesThree;
        #     $quesThree{"type"} = 3;
        #     my $tmpVar = $item{"word"};
        #     $tmpVar =~ s/[^A-Za-z]//g;
        #     ${$quesThree{"answer"}}{"word"} = $tmpVar;
        #     ${$quesThree{"answer"}}{"def"} = ${${$item{"sense"}}[0]}{"def"};
        #     $quesThree{"pron"} = $item{"pron"};

        #     push @ques,\%quesThree;

        # }

        ##########_Q4_##########
        my @q4AnsArray;
        my @q4OptArray;
        my %option;

        my %quesFour;
        $quesFour{"type"} = 4;

        $option{"word"} = $item{"word"};
        $option{"def"} = ${$item{"sense"}[0]}{"def"};

        push (@q4AnsArray,\%option);
        my $desArray4 = desired(\@questions,2);

        foreach my $tmp (@{$desArray4}) {
            
            my %option;
            $option{"word"} = ${$tmp}{"word"};
            $option{"def"} = ${$tmp}{"def"};
            push @q4AnsArray,\%option;
        }
        
        @q4AnsArray = rand_array(@q4AnsArray);
        $quesFour{"answer"} = \@q4AnsArray;

        foreach my $var (@q4AnsArray) {

            push (@q4OptArray,${$var}{"word"});
        }
        @q4OptArray = rand_array(@q4OptArray);

        for my $var (0 .. 2) {
            
            my %option;
            $option{"word"} = $q4OptArray[$var];
            $option{"def"} = ${$q4AnsArray[$var]}{"def"};

            push @{$quesFour{"option"}},\%option;

        }
        push @ques,\%quesFour;

        ##########_Q6_##########
        my %quesSix;
        $quesSix{"type"} = 6;
        $quesSix{"answer"} = $item{"word"};
        $quesSix{"pron"} = $item{"pron"};

        push @ques,\%quesSix;

        ##########_Q7_##########
        my %quesSeven;
        $quesSeven{"type"} = 7; #类型同5 为规避使用7
        ${$quesSeven{"answer"}}{"word"} = $item{"word"};
        ${$quesSeven{"answer"}}{"def"} = ${$item{"sense"}[0]}{"def"};

        my %q7Option1; 

        $q7Option1{"word"} = $item{"word"};
        $q7Option1{"def"} = ${$quesSeven{"answer"}}{"def"};
        $q7Option1{"img"} = $item{"img"}
            if exists ($item{"img"});

        my @tmpQ7Options;
        push @tmpQ7Options,\%q7Option1;
        my $desArray7 = desired(\@questions,2);
        push @tmpQ7Options,@{$desArray7};

        @tmpQ7Options = rand_array(@tmpQ7Options);
        foreach my $q7 (@tmpQ7Options) {

            my %q7OptionHash;
            $q7OptionHash{"def"} = ${$q7}{"def"};
            push @{$quesSeven{"option"}},\%q7OptionHash;
        }
        
        push @ques,\%quesSeven;
        ##########__##########
        $item{"questions"} = \@ques;
        print OUT $jsonCoder->encode(\%item)."\n";
    }
    close IN;
    close OUT;
}

#处理问题
sub get_QA {

    my ($in) = @_;
    my $jsonCoder = new JSON;
    my @one;

    open IN ,"< $in", or die $!;
    while (<IN>) {
        my $item = $jsonCoder->decode($_);
        my %item = %{$item};
        my %question;
        $question{"word"} = $item{"word"};
        $question{"index"} = $item{"index"};
        $question{"def"} = ${$item{"sense"}[0]}{"def"};
        $question{"img"} = $item{"img"}
            if exists($item{"img"});
        push(@one,\%question);
    }
    close IN;
    return @one;
}

#处理题库数据
sub correct_QA {

    my ($qArray,$item,$quesDB) = @_;

    my $indexNum = ${$item}{"index"};

    my %tmpDBDate;
    $tmpDBDate{"word"} = ${$item}{"word"};
    $tmpDBDate{"def"} = ${${${$item}{"sense"}}[0]}{"def"};
    $tmpDBDate{"index"} = ${$item}{"index"};
    $tmpDBDate{"img"} = ${$item}{"img"}    if exists ${$item}{"img"};

    @{$quesDB} = @{$qArray}[0 .. 9]    if @{$quesDB} < 10;
    push @{$quesDB},\%tmpDBDate;
    shift @{$quesDB}   if @{$quesDB} > 50;

    my @qArray = @{$qArray};

    my @ultArray;

    foreach my $var (@qArray) {

        my $tmpIndex = ${$var}{"index"};
       
        if ($tmpIndex <= $indexNum) {
            push @ultArray,$var;
        }else {
            next;
        }
    }

    if (@ultArray < 50) {

        for (0 .. $#{$quesDB}) {

            last unless @ultArray < 50;
            my $random = int rand @{$quesDB};
            push @ultArray,${$quesDB}[$random];
        }
    }
    my $quantity = int @ultArray/4;
    for (1 .. $quantity) {

        my $num = int rand @{$quesDB};
        push @ultArray,${$quesDB}[$num];
    }

    my @tagArray = ();
    my %delRepHash;

    foreach my $varData (@ultArray) {

        unless (exists $delRepHash{$varData}) {

            push @tagArray,$varData;
            $delRepHash{$varData} = 1;
        }
    }
    return @tagArray;
}

sub rand_array {

    my (@array) = @_;
    my $jsonCoder = new JSON;

    my @num = (0 .. @array-1);

    for my $x (0 .. @array-1) {

        my $y = int(rand(@array-1));
        redo
            if $x == $y and !(@num ~~ /$y/);

        if (ref($array[$x]) eq 'HASH') {
            my %tmp = %{$array[$x]};
            $array[$x] = $array[$y];
            $array[$y] = \%tmp;
        }else{
            my $tmp = $array[$x];
            $array[$x] = $array[$y];
            $array[$y] = $tmp;
        }
 
        @num = grep(/$y/,@num);
       
    }

    return @array;
}

sub desired {

    my ($array,$quantity) = @_;

    my @tarArray;
    my %flagHash;
    # my @tmpArray = @{$array};

    for (1 .. $quantity) {

        my $randNum = int rand @{$array};
        my %tmpData;

        $tmpData{"word"} = ${${$array}[$randNum]}{"word"};
        $tmpData{"def"} = ${${$array}[$randNum]}{"def"};
        $tmpData{"img"} = ${${$array}[$randNum]}{"img"}
            if exists ${${$array}[$randNum]}{"img"};
        push @tarArray,\%tmpData;
        my @foundlist = splice @{$array},$randNum,1;

        # if (!exists $flagHash{$tmpData{"word"}}) {

        #     $flagHash{$tmpData{"word"}} = 1;
        # }else {

        #     redo;
        # }
    }

    return \@tarArray;
}

sub similarWord
{
    my ($targetWord,@sourceWord) = @_;
    my $minEidtDis = 10;
    my @similar = ();

    foreach my $source (@sourceWord)
    {
        my @s = split //, $source;
        my @t = split //, $targetWord;
        unshift( @s, 0 );
        unshift( @t, 0 );

        my $sLength = @s;
        my $tLength = @t;

        #剪枝优化
        if ( abs( $sLength - $tLength ) > $minEidtDis )#abs( $sLength - $tLength ) == 0 ||
        {
            next;
        }

        my @distance = ();

        #初始化
        for my $i ( 0 .. $tLength - 1 )
        {
            $distance[$i][0] = $i;
        }
        for my $j ( 0 .. $sLength - 1 )
        {
            $distance[0][$j] = $j;
        }

        #算法
        for my $i ( 1 .. $tLength - 1 )
        {
            for my $j ( 1 .. $sLength - 1 )
            {
                $distance[$i][$j] = min(
                    $distance[ $i - 1 ][$j] + 1,
                    $distance[$i][ $j - 1 ] + 1,
                    $distance[ $i - 1 ][ $j - 1 ] + substitute( $s[$j], $t[$i] )
                );
            }
        }

        if($distance[ $tLength - 1 ][ $sLength - 1 ] > $minEidtDis)
        {
            next;
        }else
        {
            push(@similar,$source);
        }

    }

    return @similar;
}

sub min
{
    my ( $x, $y, $z ) = @_;
    my $tmp = $x < $y ? $x : $y;
    return $tmp < $z ? $tmp : $z;
}

sub substitute
{
    my ( $s, $t ) = @_;
    return $s eq $t ? 0 : 2;
}
