use warnings;
use strict;
use Encode;
use Data::Dumper;
use JSON;
use feature qw(say);

my $json = new JSON;
my $uwidCorp = 12;      # 华东理工
my $uwidLen = 0;        # 0x00
my $uwidSubDict = 13;   #带着韩语去旅游
my $uwidBase = ($uwidCorp << 26) | ($uwidLen << 24) | ($uwidSubDict << 16);

my $in = "./tmpdocument/hdlg_dzhyqlx_tmp_details.txt";
my $details = "./final_data/hdlg_dzhyqlx_details_full.txt";
my $struct = "./final_data/hdlg_dzhyqlx.studystructure.txt";
my $description = "./final_data/hdlg_dzhyqlx.studydescription.txt";

open my $IN ,"<", $in or die $!;
open my $DETAILS ,">", $details or die $!;

my %indexWord = (
    "a" => 0,
    "b" => 1,
    "c" => 2,
    "d" => 3,
    "e" => 4,
    0 => "a",
    1 => "b",
    2 => "c",
    3 => "d",
    4 => "e",
    );
my @index = (0,0,0,0,0);
my $detailsStart = 0;
my %fullStrHash = ();
my %uwidKeyList = ();

my @strData = ({"id"=>"kc"});

while (<$IN>) {
    my $line = $_;
    my %item = %{$json->decode($line)};

    if ($item{"type"} =~ /w_(\w)/) {
        my $tmpIndex = $1;
        Initialize($indexWord{$tmpIndex});
        delete $item{"type"};

        # 完整数据 
        my $obj = GetDetailsFull(\%item,$tmpIndex);
        my $uwid = ${$obj}{"uwid"};
        ${$obj}{"key"} =~ /(.*)_.+?$/;
        my $parent_id = $1;
        push @{$uwidKeyList{$parent_id}},$uwid;
        if ($fullStrHash{$parent_id} eq "layer") {
            $fullStrHash{$parent_id} = 1;
        }else {
            $fullStrHash{$parent_id}++;
        }
        say $DETAILS ${$obj}{"key"}."\t".$uwid."\t".$json->encode($obj);
    }elsif ($item{"type"} =~ /l_(\w)/) {
        my $tmpIndex = $1;
        Initialize($indexWord{$tmpIndex});
        delete $item{"type"};

        # 结构化文件
        GetStruct(\%item,$tmpIndex,\%fullStrHash,\@strData);
    }else {
        say "error ==> $.";
    }
}
close $IN;
close $DETAILS;

open my $STR ,">", $struct or die $!;
open my $DES ,">", $description or die $!;
StructFile(\%fullStrHash,\@strData);
close $STR;
close $DES;

sub GetDetailsFull {
    my ($body,$tmpIndex) = @_;
    my %obj = ();

    $obj{"body"} = $body;
    ${$body}{"audio"} =~ /(.*)\.mp3/ if exists ${$body}{"audio"};
    $obj{"key"} = GetKey($tmpIndex);

    GetUwid(\%obj);

    return \%obj;
};

sub GetStruct {
    my ($body,$tmpIndex,$fullStrHash,$strData) = @_;
    my %tmpObj = ();

    my $id = GetKey($tmpIndex);
    $id =~ /(.*)_.+?$/;
    my $parent_id = $1;

    $tmpObj{"id"} = $id;
    $tmpObj{"word"} = ${$body}{"word"} if exists ${$body}{"word"};
    $tmpObj{"title"} = ${$body}{"title"} if exists ${$body}{"title"};
    $tmpObj{"parent_id"} = $parent_id;

    $fullStrHash{$id} = "layer";
    push @{$strData},\%tmpObj;
};

sub Initialize {
    my $indexNum = shift;

    $index[$indexNum]++;
    foreach my $num ($indexNum+1 .. $#index) {
        $index[$num] = 0;
    }
};

sub GetKey {
    my $tmpIndex = shift;
    my $key = "kc_";

    foreach my $num (0 .. $indexWord{$tmpIndex}) {
        if ($index[$num]) {
            $key .= "kc".$indexWord{$num}.sprintf("%02s",$index[$num])."_";
        }else {
            last;
        }
    }
    $key =~ s/_$//g;

    return $key;
};

sub GetUwid {
    my $obj = shift;
    my $uwid = 0;
    my $next = 0;
    my $prev = 0;

    $uwid = ++$uwidBase;
    if ($detailsStart) {
        $prev = $uwid + 1;
    }else {
        $detailsStart = 1;
    }
    unless (eof) {
        $next = $uwid - 1;
    }
    ${$obj}{"uwid"} = $uwid;
    ${$obj}{"next"} = $next if $next;
    ${$obj}{"prev"} = $prev if $prev;

    return $obj;
};

sub StructFile {
    my ($fullStrHash,$strData) = @_;
    my @fullStrKey = keys %{$fullStrHash};

    foreach my $obj (@{$strData}) {
        my %str = ();
        my %des = ();
        
        my $id = ${$obj}{"id"};
        $str{"id"} = $id;
        $str{"parent_id"} = ${$obj}{"parent_id"} if exists ${$obj}{"parent_id"};
        $des{"id"} = $id;
        $des{"word"} = ${$obj}{"word"} if exists ${$obj}{"word"};
        $des{"title"} = ${$obj}{"title"} if exists ${$obj}{"title"};

        foreach my $fullId (@fullStrKey) {
            if ($fullId =~ /^$id/ and
                ${$fullStrHash}{$fullId} ne "layer") {
                $des{"progressnum"} += ${$fullStrHash}{$fullId};
                if ($fullId eq $id) {
                    push @{$str{"sub_uwid"}},@{$uwidKeyList{$fullId}};
                }
            }
            if ($fullId =~ /^\Q$id\E_[0-9a-zA-Z]+$/) {
                $des{"childrennum"}++;
                if (${$fullStrHash}{$fullId} eq "layer") {
                    push @{$str{"sub_id"}},$fullId;
                }else {
                    push @{$str{"sub_uwid"}},$fullId;
                }
            }
        }

        say $STR $id."\t".$json->encode(\%str);
        say $DES $id."\t".$json->encode(\%des);
    }
};
