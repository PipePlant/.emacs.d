use warnings;
use strict;
use JSON;
use Data::Dumper;
use feature qw(say);

$| = 1;
my $json = new JSON;

my %oldSchoolList = ();
my %idList = ();
OldSchoolKVList(\%oldSchoolList,\%idList);
CompareData(\%oldSchoolList,\%idList);

sub OldSchoolKVList {
    my ($dataList,$idList) = @_;
        
    my $old_school_file = "./ps/ps_schools_16Feb.txt";
    open my $OLD_SCHOOL ,"<", $old_school_file or die $!;
    
    while (<$OLD_SCHOOL>) {
        $_ =~ /(.*)\t(.*)/;
        my $id = $1;
        my $item = $json->decode($2);
        my $cName = trim(${$item}{"cname"});
        my $sName = trim(${$item}{"shortName"});
        push @{${$dataList}{$cName}},$id;
        ${$idList}{$id} = $sName;
    }
    close $OLD_SCHOOL;

    return 1;
};

sub CompareData {
    my ($dataList,$idList) = @_;

    my $new_school_file = "./ps/v2_schools.txt";
    my $tmp_school = "./ps/v2_tmp_schools.txt";
    open my $NEW_SCHOOL ,"<", $new_school_file or die $!;
    open my $TMP ,">", $tmp_school or die $!;
    
    # ```process new data```
    my $regionFlag = 0;
    my $schoolCount = 0;
    my %sameRegionSchoolList = ();
    while (<$NEW_SCHOOL>) {
        my $line = $_;
        my $item = $json->decode($line);
        my $regionCode = trim(${$item}{"regionCode"});
        my $cName = trim(${$item}{"cname"});
        my $sName = trim(${$item}{"shortName"});
        if ($regionFlag != $regionCode) {
            $regionFlag = $regionCode;
            $schoolCount = 0;
            %sameRegionSchoolList = ();
        }
        # check is new data school exists in same region
        if (exists $sameRegionSchoolList{$cName}) {
            next;
        } else {
            $sameRegionSchoolList{$cName} = 1;
        }
        # ```compare```
        # check is school exists in old data
        if (exists ${$dataList}{$cName}) {
            ${$item}{"id"} = shift @{${$dataList}{$cName}};
            delete ${$dataList}{$cName} unless @{${$dataList}{$cName}};
        } else {
            my $id = $regionCode * 10000 + ++$schoolCount;
            while (exists ${$idList}{$id}) {
                $id = $regionCode * 10000 + ++$schoolCount;
            }
            ${$item}{"id"} = $id;
            ${$idList}{$id} = 1;
        }
        say $TMP "1\t".$regionCode."\t".$json->encode($item);
    }

    # ```old no match data```
    foreach my $key (keys %{$dataList}) {
        map {
            my $id = $_;
            my $value = ${$idList}{$id};
            say $TMP "2\t".$id."\t".$value;
        } @{${$dataList}{$key}};
        delete ${$dataList}{$key};
    }
    
    close $NEW_SCHOOL;
    close $TMP;

    return 1;
}

sub trim {
    my $string = shift;

    $string =~ s/^\s+|\s+$//g;
    
    return $string;
};
